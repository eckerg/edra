from converters.base import AbstractConverter
import logging


class DiatarConverter(AbstractConverter):
    def __init__(self, args):
        super().__init__()
        self._from_dir = args.from_dir
        self._to_file = args.to
        self._dtx_lines = [
            "; Jézus él!",
            "; Generated by Emmet.yaml Converter",
            "NEmmánuel - Jézus él!",
            "REmmánuel",
            ""
        ]
        self._current_id = 0

    @staticmethod
    def add_argparser(subparsers):
        parser_diatar = subparsers.add_parser("diatar", help="Converts to Diatár's format.")
        parser_diatar.add_argument("--from-dir", required=True, help="directory where the Emmet.yaml files reside")
        parser_diatar.add_argument("--to", required=True, help="target DTX file")
        parser_diatar.set_defaults(converter=DiatarConverter)

    def convert(self, song_yaml, filepath):
        self._preprocessor.preprocess(song_yaml, flatten=True, soft_line_break_strategy='ignore')

        # Look up primary language
        emm_hu_book = next((b for b in song_yaml['books'] if b['id'] == 'emm_hu'), None)
        if emm_hu_book is None:
            return

        # Look up lyrics for primary language
        song_lyrics = next(l for l in song_yaml['lyrics'] if l['lang'] == emm_hu_book['lang'])

        # Assemble song
        self._dtx_lines.append(">" + emm_hu_book['number'] + " - " + song_lyrics['title'])
        for verse in song_lyrics['verses']:
            verse_parts = self._split_verse_on_hard_breaks(verse['lines'])

            for i, verse_part in enumerate(verse_parts):
                verse_suffix = '' if len(verse_parts) == 1 else '-' + str(i+1)
                self._dtx_lines.append("/" + verse['name'].upper() + verse_suffix)
                self._dtx_lines.append("#" + self._generate_verse_id())
                self._dtx_lines.extend(" "+l for l in verse_part)

        self._dtx_lines.append("")

    def finish(self):
        logging.info("Writing to '{}'...".format(self._to_file))
        with open(self._to_file, "wt") as f:
            f.write("\n".join(self._dtx_lines))

    def _generate_verse_id(self):
        self._current_id += 1
        return hex(self._current_id)[2:].upper().zfill(8)
