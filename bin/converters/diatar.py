from converters.base import AbstractConverter
import itertools
import logging
from natsort import natsorted


class DiatarConverter(AbstractConverter):
    def __init__(self, args):
        super().__init__()
        self._to_file = args.to
        self._dtx_songs = {}
        self._current_id = 0

    @staticmethod
    def create_argparser(subparsers):
        parser_diatar = subparsers.add_parser("diatar", help="Converts to Diatár's format.")
        parser_diatar.add_argument("--to", required=True, help="target DTX file")
        return parser_diatar

    def convert(self, song_yaml, filepath):
        self._preprocessor.preprocess(song_yaml, soft_line_break_strategy='ignore')

        # Look up primary language
        emm_hu_book = self._get_book_from_yaml(song_yaml, 'emm_hu')
        if emm_hu_book is None:
            return

        # Look up lyrics for primary language
        song_lyrics = self._get_lyrics_from_yaml(song_yaml, emm_hu_book['lang'])

        # Assemble song
        dtx_song = []
        dtx_song.append(">" + emm_hu_book['number'] + " - " + song_lyrics['title'])
        for verse in song_lyrics['verses']:
            verse_parts = self._split_verse_on_hard_breaks(verse['lines'])
            for i, verse_part in enumerate(verse_parts):
                verse_suffix = '' if len(verse_parts) == 1 else '-' + str(i+1)
                dtx_song.append("/" + verse['name'].upper() + verse_suffix)
                dtx_song.append("#" + self._generate_verse_id())
                dtx_song.extend(" "+l for l in verse_part)
        dtx_song.append("")

        self._dtx_songs[emm_hu_book['number']] = dtx_song

    def finish(self):
        logging.info("Writing to '{}'...".format(self._to_file))
        dtx_songs = (self._dtx_songs[num] for num in natsorted(self._dtx_songs.keys()))
        dtx_lines = itertools.chain(
            (
                "; Jézus él!",
                "; Generated by Emmet.yaml Converter",
                "NEmmánuel - Jézus él!",
                "REmmánuel",
                ""
            ),
            (line for songlines in dtx_songs for line in songlines)
        )
        with open(self._to_file, "wt") as f:
            f.write("\n".join(dtx_lines))

    def _generate_verse_id(self):
        self._current_id += 1
        return hex(self._current_id)[2:].upper().zfill(8)
